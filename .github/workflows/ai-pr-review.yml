name: AI PR Review
on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.{js,ts,jsx,tsx,py,java,cpp,c,cs,go,rb,php,kt,swift,rs,scala,sql}

      - name: AI PR Review
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          model: gpt-4o-mini
          review_comment_lgtm: false
          language: en
          max_tokens: 2000
          temperature: 0.1
          system_message: |
            You are an expert code reviewer. Provide specific, actionable feedback with:
            
            🔍 **ANALYSIS FORMAT**:
            - **🚨 CRITICAL**: Security vulnerabilities, data corruption risks
            - **⚠️ HIGH**: Performance issues, logical errors, missing error handling  
            - **💡 MEDIUM**: Code quality improvements, refactoring opportunities
            - **✨ LOW**: Style inconsistencies, minor optimizations
            
            📋 **REVIEW CHECKLIST**:
            - [ ] Security vulnerabilities (SQL injection, XSS, auth bypass)
            - [ ] Performance bottlenecks (inefficient algorithms, memory leaks)
            - [ ] Logic errors and edge cases
            - [ ] Error handling completeness
            - [ ] Code maintainability and readability
            - [ ] Test coverage adequacy
            - [ ] Design patterns and architecture
            - [ ] Documentation quality
            
            🎯 **PROVIDE**:
            - Specific line numbers when possible
            - Code examples for suggested improvements
            - Rationale for each recommendation
            - Severity level for each issue
            
            ❌ **AVOID**:
            - Generic comments without context
            - Nitpicking formatting unless critical
            - Suggesting changes without clear benefit

          review_beginning: |
            ## 🤖 AI Code Review Summary
            
            **Files Reviewed**: `${{ steps.changed-files.outputs.all_changed_files }}`
            
            **Review Scope**: Security, Performance, Logic, Maintainability, Testing
            
            ---

          review_comment_lgtm: |
            ## ✅ Code Review Passed
            
            **Great job!** The code changes look solid with no critical issues identified.
            
            **Highlights**:
            - Security practices followed
            - Performance considerations addressed  
            - Error handling implemented
            - Code is maintainable and readable
            
            **Minor suggestions** may be provided below for further improvement.

      - name: Generate Review Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get PR details
            const pr = context.payload.pull_request;
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ');
            
            // Create summary comment
            const summaryComment = `
            ## 📊 AI Review Summary
            
            **PR**: #${pr.number} - ${pr.title}
            **Author**: @${pr.user.login}
            **Files Changed**: ${changedFiles.length}
            **Lines Changed**: +${pr.additions} -${pr.deletions}
            
            ### 🔍 Review Metrics
            - **Security Check**: ✅ Completed
            - **Performance Analysis**: ✅ Completed  
            - **Logic Validation**: ✅ Completed
            - **Test Coverage**: ✅ Analyzed
            
            ### 📈 Code Quality Score
            Based on automated analysis of:
            - Code complexity
            - Security practices
            - Performance considerations
            - Maintainability factors
            
            *Detailed feedback provided in individual file reviews below.*
            `;
            
            // Post summary as PR comment
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryComment
            });

  code-quality-check:
    runs-on: ubuntu-latest
    needs: ai-review
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run additional quality checks
        run: |
          echo "🔍 Running supplementary code quality checks..."
          
          # Check for TODO/FIXME comments
          echo "## 📝 TODO/FIXME Comments Found:"
          grep -r "TODO\|FIXME" . --include="*.js" --include="*.ts" --include="*.java" --include="*.py" || echo "None found"
          
          # Check for hardcoded secrets patterns
          echo "## 🔒 Potential Secret Patterns:"
          grep -r "password\|secret\|key\|token" . --include="*.js" --include="*.ts" --include="*.java" --include="*.py" | head -10 || echo "None found"
          
          # Check file sizes
          echo "## 📏 Large Files (>1MB):"
          find . -type f -size +1M -not -path "./.git/*" || echo "None found"